{"version":3,"sources":["room.js","server.js","App.js","reportWebVitals.js","index.js"],"names":["Remote","p","className","for","name","value","this","props","con","state","c","id","type","onClick","server","cal","Component","Server","send","bind","e","app","setState","messages","concat","sendChannel","r","document","getElementById","lc","setRemoteDescription","JSON","parse","then","a","chat","rd","onSubmit","length","localConnection","RTCPeerConnection","createDataChannel","App","client","onicecandidate","stringify","localDescription","onmessage","data","console","log","onopen","onclose","createOffer","o","setLocalDescription","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.b97c22c5.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nclass Remote extends Component  {\r\n    constructor(p)\r\n    {\r\n      super(p);\r\n    }\r\n    render()\r\n  {\r\n    return (\r\n      <div className=\"App\">\r\n          <label for=\"pid\">Your Prop</label>\r\n          <textarea name=\"pid\" value={this.props.con.state.c}/><br></br>\r\n        <label for=\"rid\">Room Id</label>\r\n        <textarea name=\"rid\" id=\"lk\"/>\r\n        <button type=\"submit\" onClick={this.props.server.cal}>Connect</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n  export default Remote;\r\n  // const remoteConnection = new RTCPeerConnection()\r\n\r\n  // remoteConnection.onicecandidate = e =>  {\r\n  // console.log(\" NEW ice candidnat!! on localconnection reprinting SDP \" )\r\n  //  console.log(JSON.stringify(remoteConnection.localDescription) )\r\n  // }\r\n  \r\n   \r\n  // remoteConnection.ondatachannel= e => {\r\n  \r\n  //       const receiveChannel = e.channel;\r\n  //       receiveChannel.onmessage =e =>  console.log(\"messsage received!!!\"  + e.data )\r\n  //       receiveChannel.onopen = e => console.log(\"open!!!!\");\r\n  //       receiveChannel.onclose =e => console.log(\"closed!!!!!!\");\r\n  //       remoteConnection.channel = receiveChannel;\r\n  \r\n  // }\r\n  \r\n  \r\n  // remoteConnection.setRemoteDescription(offer).then(a=>console.log(\"done\"))\r\n  // await remoteConnection.createAnswer().then(a => remoteConnection.setLocalDescription(a)).then(a=>\r\n  //   console.log(JSON.stringify(remoteConnection.localDescription).split(\"\\\\\").join('\\\\\\\\')))","import './App.css';\r\nimport Remote from './room';\r\nimport 'react-chatbox-component/dist/style.css';\r\nimport {ChatBox} from 'react-chatbox-component';\r\nimport React, { Component } from 'react';\r\nclass Server extends Component  {\r\n    constructor(p)\r\n    {\r\n      super(p);\r\n      this.send= this.send.bind(this);\r\n      this.cal= this.cal.bind(this);\r\n    }\r\n    send(e)\r\n  {\r\n    this.props.app.setState({ \r\n      messages: this.props.app.state.messages.concat([{\r\n       \"text\":e,\r\n       \"id\":\"1\",\r\n       \"sender\": {\r\n         \"name\": \"ME\",\r\n         \"uid\": \"user1\",\r\n         \"avatar\": \"https://cdn.dribbble.com/users/1041205/screenshots/3636353/dribbble.jpg\",\r\n       }\r\n     }])\r\n     });\r\n     this.props.sendChannel.send(e);\r\n  }\r\n  cal()\r\n  {\r\n    this.props.app.setState({r:document.getElementById(\"lk\").value});\r\n      this.props.lc.setRemoteDescription (JSON.parse(document.getElementById(\"lk\").value)).then(a=>this.props.app.chat());        \r\n}\r\n    render()\r\n  {\r\n    return (\r\n      <div className=\"App\">\r\n           {this.props.app.state.rd?<Remote con={this.props.app} server={this}></Remote>:\"\"}\r\n           {this.props.app.state.rd?\r\n        \"\"\r\n        :\r\n        <div className='container'>  \r\n        <div className='chat-header'>   \r\n        <h5>Chat</h5> \r\n        </div>  \r\n        <div id=\"ko\">\r\n        <ChatBox key={this.props.app.state.messages.length} onSubmit={this.send} messages={this.props.app.state.messages} />\r\n        </div>\r\n        </div>}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n  export default Server;","import './App.css';\nimport Remote from './room';\nimport Server from './server';\nimport React, { Component } from 'react';\nimport 'react-chatbox-component/dist/style.css';\nimport {ChatBox} from 'react-chatbox-component';\n// const lc=new RTCPeerConnection()\n// const dc=lc.createDataChannel(\"channel\")\n// lc.onicecandidate=e=>console.log(\"hjgjg \"+JSON.stringify(lc.localDescription))\n// lc.createOffer().then(o=>lc.setLocalDescription(o)).then(a=>console.log(\"set\"))\nconst localConnection = new RTCPeerConnection();\nconst sendChannel = localConnection.createDataChannel(\"sendChannel\");\nclass App extends Component \n{\n  constructor(p)\n  {\n    super(p);\n    this.state = \n    {\n      rd:true,\n      c:\"\",\n      r:\"\",\n      messages:[],\n      server:true,\n      client:false\n    }\n    this.chat= this.chat.bind(this);\n    localConnection.onicecandidate = e =>  {\n      this.setState({c: JSON.stringify(localConnection.localDescription)});\n      }\n   \n      sendChannel.onmessage =e =>  {\n        this.setState({ \n         messages: this.state.messages.concat([{\n          \"text\":e.data,\n          \"id\":\"1\",\n          \"sender\": {\n            \"name\": \"He\",\n            \"uid\": \"user2\",\n            \"avatar\": \"https://i.guim.co.uk/img/media/d31ebd49b32a5aa609a584ababb1e03bc70b4942/573_213_2929_1758/master/2929.jpg?width=445&quality=45&auto=format&fit=max&dpr=2&s=a54fc963e39dd6645fce012663ed13c1\",\n          }\n        }])\n        });\n        \n        console.log(this.state.messages);  };\n      sendChannel.onopen = e => console.log(\"open!!!!\");\n        sendChannel.onclose =e => console.log(\"closed!!!!!!\");\n   \n   \n   localConnection.createOffer().then(o => localConnection.setLocalDescription(o) );\n  }\n  chat()\n  {\n    this.setState({rd: false});\n  }\n  render()\n  {\n    return(\n      <div className=\"App\">\n       {this.state.rd?<button>Server</button>:\"\"}{this.state.rd?<button>Client</button>:\"\"}\n        {this.state.server?<Server app={this} lc={localConnection} sendChannel={sendChannel}></Server>:\"\"}\n\n\n        {/* {msg.map(item => (\n        <li key={item}>{item}</li>\n      ))} */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n//https://github.com/hnasr/javascript_playground/blob/master/webrtc/peerA_final.js\n// remoteConnection.channel.send(\"sdfdas\")\n//https://www.npmjs.com/package/react-chatbox-component","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nreportWebVitals();\n"],"sourceRoot":""}